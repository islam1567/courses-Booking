// <auto-generated />
using System;
using Bookink_Courses.Models.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bookink_Courses.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250218142212_initDB")]
    partial class initDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Catagory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Catagories");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Course_Trainer", b =>
                {
                    b.Property<int>("Trainer_Id")
                        .HasColumnType("int");

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.HasKey("Trainer_Id", "Course_Id");

                    b.HasIndex("Course_Id");

                    b.ToTable("Course_Trainers");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Courses", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Catagory_Id")
                        .HasColumnType("int");

                    b.Property<DateTime>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Trainer_Id")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("Catagory_Id");

                    b.HasIndex("Trainer_Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Lessons", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("Course_Id")
                        .HasColumnType("int");

                    b.Property<int>("Order_No")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("Course_Id");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Trainers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("Create_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Is_Active")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Course_Trainer", b =>
                {
                    b.HasOne("Bookink_Courses.Models.Entities.Courses", "Courses")
                        .WithMany("course_Trainers")
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookink_Courses.Models.Entities.Trainers", "Trainer")
                        .WithMany("course_Trainers")
                        .HasForeignKey("Trainer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Courses", b =>
                {
                    b.HasOne("Bookink_Courses.Models.Entities.Catagory", "Catagory")
                        .WithMany("Courses")
                        .HasForeignKey("Catagory_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bookink_Courses.Models.Entities.Trainers", "Trainer")
                        .WithMany("Courses")
                        .HasForeignKey("Trainer_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catagory");

                    b.Navigation("Trainer");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Lessons", b =>
                {
                    b.HasOne("Bookink_Courses.Models.Entities.Courses", "Courses")
                        .WithMany("Lessons")
                        .HasForeignKey("Course_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Catagory", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Courses", b =>
                {
                    b.Navigation("Lessons");

                    b.Navigation("course_Trainers");
                });

            modelBuilder.Entity("Bookink_Courses.Models.Entities.Trainers", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("course_Trainers");
                });
#pragma warning restore 612, 618
        }
    }
}
